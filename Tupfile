LIB_NAME    = sfl
LIB_PATH    = lib/
INCL_PATH   = include/
BUILD_PATH  = build/
TEST_TARGET = bin/test

VERSION     = 0.0.1
VERSION_BC  = 0

CXX = c++

CXXFLAGS := -Wall -Wextra -pipe -fPIC
CXXFLAGS += -fvisibility=hidden -fvisibility-inlines-hidden
CXXFLAGS += -fdiagnostics-color
CXXFLAGS += -O2 -std=c++11
CXXFLAGS += -I$(INCL_PATH)

ifeq (@(TUP_PLATFORM),linux)
  LD_TARGET  = lib$(LIB_NAME).so
  LIB_TARGET = $(LD_TARGET).$(VERSION)
  SO_TARGET  = $(LD_TARGET).$(VERSION_BC)

  SOFLAGS += -shared -Wl,-soname,$(SO_TARGET)
endif

ifeq (@(TUP_PLATFORM),macosx)
  LIB_TARGET = lib$(LIB_NAME).$(VERSION).dylib
  SO_TARGET  = lib$(LIB_NAME).$(VERSION_BC).dylib
  LD_TARGET  = lib$(LIB_NAME).dylib

  LDFLAGS += -stdlib=libc++
  SOFLAGS += -dynamiclib \
    -current_version $(VERSION) -compatibility_version $(VERSION_BC)
endif

ifeq ($(LIB_TARGET),)
  error Unsupported platform.
endif

!build = |> $(CXX) $(CXXFLAGS) -c %f -o %o |>
!link  = |> $(CXX) $(CXXFLAGS) %f $(LDFLAGS) -o %o |>

# building the shared library
: foreach src/*.cpp |> !build -DSFL_SHARED |> $(BUILD_PATH)%B.o
: $(BUILD_PATH)*.o |> !link $(SOFLAGS) |> $(LIB_PATH)$(LIB_TARGET)

ifneq ($(SO_TARGET),)
  # liba.1.2.3.so -> liba.1.so
  : $(LIB_PATH)$(LIB_TARGET) |> ln -s $(LIB_TARGET) %o |> $(LIB_PATH)$(SO_TARGET)
  # liba.1.so -> liba.so
  : $(LIB_PATH)$(SO_TARGET) |> ln -s $(SO_TARGET) %o |> $(LIB_PATH)$(LD_TARGET)
endif

# building the test suite
: foreach test/*.cpp |> !build |> $(BUILD_PATH)test/%B.o
: $(BUILD_PATH)test/*.o | \
  $(LIB_PATH)$(LIB_TARGET) $(LIB_PATH)$(SO_TARGET) $(LIB_PATH)$(LD_TARGET) |> \
  !link -L$(LIB_PATH) -l$(LIB_NAME) |> $(TEST_TARGET)
